// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: logs.sql

package generated

import (
	"context"
	"database/sql"

	"github.com/maddsua/eventdb2/storage/sqlite/types"
)

const insertLogEntry = `-- name: InsertLogEntry :exec
insert into log_entries (
	stream_id,
	date,
	level,
	message,
	meta
) values (
	?1,
	?2,
	?3,
	?4,
	?5
)
`

type InsertLogEntryParams struct {
	StreamID types.Blob
	Date     int64
	Level    string
	Message  string
	Meta     types.NullBlob
}

func (q *Queries) InsertLogEntry(ctx context.Context, arg InsertLogEntryParams) error {
	_, err := q.db.ExecContext(ctx, insertLogEntry,
		arg.StreamID,
		arg.Date,
		arg.Level,
		arg.Message,
		arg.Meta,
	)
	return err
}

const insertLogStream = `-- name: InsertLogStream :one
insert into log_streams (
	created_at,
	updated_at,
	name,
	token,
	platform,
	net_whitelist
) values (
	?1,
	?2,
	?3,
	?4,
	?5,
	?6
) returning id
`

type InsertLogStreamParams struct {
	CreatedAt    int64
	UpdatedAt    int64
	Name         string
	Token        types.NullBlob
	Platform     interface{}
	NetWhitelist types.NullBlob
}

func (q *Queries) InsertLogStream(ctx context.Context, arg InsertLogStreamParams) (types.Blob, error) {
	row := q.db.QueryRowContext(ctx, insertLogStream,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Token,
		arg.Platform,
		arg.NetWhitelist,
	)
	var id types.Blob
	err := row.Scan(&id)
	return id, err
}

const queryLogs = `-- name: QueryLogs :many
select id, stream_id, date, level, message, meta from log_entries
where (stream_id = ?1 or ?1 is null)
	and (date >= ?2 or ?2 is null)
	and (date <= ?3 or ?3 is null)
order by date
`

type QueryLogsParams struct {
	StreamID types.NullBlob
	From     sql.NullInt64
	To       sql.NullInt64
}

func (q *Queries) QueryLogs(ctx context.Context, arg QueryLogsParams) ([]LogEntry, error) {
	rows, err := q.db.QueryContext(ctx, queryLogs, arg.StreamID, arg.From, arg.To)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LogEntry
	for rows.Next() {
		var i LogEntry
		if err := rows.Scan(
			&i.ID,
			&i.StreamID,
			&i.Date,
			&i.Level,
			&i.Message,
			&i.Meta,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: logs.sql

package generated

import (
	"context"
)

const insertLogEntry = `-- name: InsertLogEntry :exec
insert into log_entries (
	stream_id,
	date,
	level,
	message,
	meta
) values (
	?1,
	?2,
	?3,
	?4,
	?5
)
`

type InsertLogEntryParams struct {
	StreamID []byte
	Date     int64
	Level    string
	Message  string
	Meta     []byte
}

func (q *Queries) InsertLogEntry(ctx context.Context, arg InsertLogEntryParams) error {
	_, err := q.db.ExecContext(ctx, insertLogEntry,
		arg.StreamID,
		arg.Date,
		arg.Level,
		arg.Message,
		arg.Meta,
	)
	return err
}

const insertLogStream = `-- name: InsertLogStream :one
insert into log_streams (
	created_at,
	updated_at,
	name,
	token,
	net_whitelist
) values (
	?1,
	?2,
	?3,
	?4,
	?5
) returning id
`

type InsertLogStreamParams struct {
	CreatedAt    int64
	UpdatedAt    int64
	Name         string
	Token        []byte
	NetWhitelist []byte
}

func (q *Queries) InsertLogStream(ctx context.Context, arg InsertLogStreamParams) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, insertLogStream,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Token,
		arg.NetWhitelist,
	)
	var id []byte
	err := row.Scan(&id)
	return id, err
}
